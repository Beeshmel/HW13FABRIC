import java.util.Arrays;

/**
 * Найти в Internet алгоритм быстрой сортировки [O(N*logN)] и
 * прокомментировать каждую инструкцию данного алгоритма.
 */
public class QuickSort {

    /**
     * Метод быстрой сортировки
     *
     * - Из массива выбирается опорный элемент, чаще всего посередине массива.
     * - Другие элементы массива распределяются таким образом, чтобы меньшие размещались до него, а большие — после.
     * - Далее первые шаги рекурсивно применяются к подмассивам, которые разделились опорным элементом на две части —
     * слева и справа от него.
     *
     * @param array - сортируемый массив
     * @param low   - левая граница (индекс) сортируемого массива/подмассива
     * @param high  - правая граница (индекс) сортируемого массива/подмассива
     */
    public static void quickSort(int[] array, int low, int high) {

        if (array.length == 0 || low >= high) // если длина массива равна 0 или если уже нечего делить,
            return; // ...завершить выполнение

        // выбор опорного элемента
        int middle = low + (high - low) / 2; // берется индекс элемента в (около)середине массива
        int border = array[middle]; // а значение этого элемента принимается в качестве опорного элемента

        // разделение на подмассивы, которые больше и меньше опорного элемента
        int i = low, j = high; // присваивание "счетчикам" i и j индексов левой и правой границы массива соответственно
        while (i <= j) { // пока значение i не превосходит значение j,
            while (array[i] < border) { // пока значение i-го элемента массива меньше опорного..
                i++; //.. инкремент i
            }

            while (array[j] > border) { // пока значение j-го элемента массива больше опорного..
                j--; //.. декремент j
            }

            // замена элементов местами
            if (i <= j) { // если счетчик левой границы еще не превосходит счетчик правой границы
                int temp = array[i]; // временной переменной присваивается значение i-го элемента
                array[i] = array[j]; // i-ому элементу присваивается значение j-го элемента
                array[j] = temp; // j-ому элементу присваивается значение временной переменной
                i++; // инкремент i
                j--; // инкремент j
            }
        }

        // вызов рекурсии для сортировки левой и правой части
        if (low < j) // если индекс j остался больше low,
            quickSort(array, low, j); // вызывается метод quickSort с новыми параметрами - обновленными границами массива -
        // сортируется левая часть массива

        if (high > i) // если индекс i остался меньше high,
            quickSort(array, i, high); // вызывается метод quickSort с новыми параметрами - обновленными границами массива -
        // сортируется правая часть массива
    }

    /**
     * Проверка работы сортировки
     */
    public static void main(String[] args) {
        int[] x = {4, 7, -3, 8, 13, 6, 10, 12, 2};
        System.out.println("Было");
        System.out.println(Arrays.toString(x));
        int low = 0;
        int high = x.length - 1;
        quickSort(x, low, high);
        System.out.println("Стало");
        System.out.println(Arrays.toString(x));
    }
}
